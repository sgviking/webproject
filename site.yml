---
- name: Install Python 2.7 for Ubuntu 16.04
  hosts: all
  become: true
  gather_facts: false
  tasks:
  # https://groups.google.com/forum/#!topic/ansible-project/DUKzTho3OCI
  - name: Update packages
    raw: apt-get update -qq
    tags: [ "prereq" ]
  - name: Install Python 2.7
    raw: apt-get install -qq python2.7
    tags: [ "prereq" ]

- name: Install latest PostgreSQL
  hosts: all
  become: true
  gather_facts: false
  tasks:
  - name: Add PostgreSQL PPA
    apt_repository:
      repo: "{{ postgres_ppa }}"
      state: present
    tags: [ "postgresql" ]
  - name: Add PostgreSQL PPA key
    apt_key:
      url: "{{ postgres_ppa_key }}"
      state: present
    tags: [ "postgresql" ]
  - name: Update apt cache
    apt:
      update_cache: yes
    tags: [ "postgresql" ]
  - name: Install PostgreSQL and dependency
    apt:
      name: "{{ item }}"
      state: present
    with_items:
      - python-psycopg2
      - postgresql-9.6
    tags: [ "postgresql" ]

- name: Configure PostgreSQL with database and user
  hosts: all
  become: true
  become_user: postgres
  gather_facts: false
  tasks:
  - name: Add PostgreSQL table
    postgresql_db:
      name: "{{ postgres_database }}"
    tags: [ "postgresql" ]
  - name: Add PostgreSQL user
    postgresql_user:
      db: "{{ postgres_database }}"
      name: "{{ postgres_user }}"
      password: "{{ postgres_password }}"
    tags: [ "postgresql" ]
  - name: Remove privileges for PUBLIC role to created database
    postgresql_privs:
      db: "{{ postgres_database }}"
      role: PUBLIC
      type: database
      priv: ALL
      state: absent
    tags: [ "postgresql" ]

- name: Add roles to server
  hosts: all
  become: true
  gather_facts: true
  tasks:
  roles:
    - { role: "angstwad.docker_ubuntu", tags: [ "docker" ] }
    - { role: "geerlingguy.java", tags: [ "elasticsearch " ] }
    - { role: "geerlingguy.elasticsearch", tags: [ "elasticsearch "] }
    - { role: "geerlingguy.nginx", tags: [ "nginx" ] }

- name: Configure iptables
  hosts: all
  become: true
  gather_facts: false
  tasks:
  - name: Install iptables-persistent script
    apt:
      name: iptables-persistent
      state: present
    notify: Create and save iptables
    tags: [ "iptables" ]
  - name: Enable netfilter-persistent service
    service:
      name: netfilter-persistent
      state: started
      enabled: yes
    notify: Create and save iptables
    tags: [ "iptables" ]
  - name: Copy iptables script to server
    copy:
      src: files/iptables.sh
      dest: /tmp/iptables.sh
      owner: root
      group: root
      mode: 0700
    notify: Create and save iptables
    tags: [ "iptables" ]
  - name: Create /etc/iptables directory
    file:
      path: /etc/iptables
      state: directory
    notify: Create and save iptables
    tags: [ "iptables" ]
  handlers:
    - name: Create and save iptables
      shell: /tmp/iptables.sh
      notify: Save iptables
    - name: Save iptables
      shell: iptables-save > /etc/iptables/rules.v4

- name: Configure NGINX
  hosts: all
  become: true
  gather_facts: false
  tasks:
  - name: Install server certificate
    copy:
      content: "{{ server_cert }}"
      dest: "{{ server_cert_path }}"
      owner: root
      group: root
      mode: 0600
    notify: Restart NGINX
    tags: [ "nginx" ]
  - name: Debug - server_cert
    debug:
      var: server_cert
      verbosity: 4
  - name: Install server key
    copy:
      content: "{{ server_key }}"
      dest: "{{ server_key_path }}"
      owner: root
      group: root
      mode: 0600
    notify: Restart NGINX
    tags: [ "nginx" ]
  - name: Debug - server_key
    debug:
      var: server_key
      verbosity: 4
  - name: Add NGINX default site
    template:
      src: default.j2
      dest: /etc/nginx/sites-available/default
      owner: root
      mode: 0644
    notify: Restart NGINX
    tags: [ "nginx" ]
  handlers:
    - name: Restart NGINX
      service:
        name: nginx
        state: restarted
        enabled: yes

- name: Install wpscan
  hosts: all
  become: true
  gather_facts: false
  tasks:
  - name: Install wpscan docker image
    docker_image:
      name: "{{ wpscan_image }}"
    tags: [ "wpscan" ]

- name: Setup hellodate
  hosts: all
  become: true
  gather_facts: false
  tasks:
  - name: Copy hellodate to server
    copy:
      src: "{{ hellodate_local_path }}"
      dest: "{{ hellodate_remote_path }}"
      owner: root
      group: root
      mode: 755
    tags: [ "hellodate" ]
  - name: Setup cron task to run hellodate every 5 minutes
    cron:
      name: Hello Date
      minute: "*/5"
      job: "{{ hellodate_remote_path }} >> /tmp/cron.log 2>&1"
      user: nobody
    tags: [ "hellodate" ]
 
- name: Setup second disk with LVM
  hosts: all
  become: true
  gather_facts: false
  tasks:
  - name: Install lvm2 package
    apt:
      name: lvm2
      state: present
    tags: [ "lvm" ]
  - name: Setup lvm volume group
    lvg:
      vg: "{{ lvm_group }}"
      pvs: "{{ lvm_disk }}"
      state: present
    tags: [ "lvm" ]
  - name: Setup lvm volume
    lvol:
      vg: "{{ lvm_group }}"
      lv: "{{ lvm_volume }}"
      size: 100%FREE
      shrink: False
    tags: [ "lvm" ]
  - name: Format filesystem on lvm volume
    filesystem:
      fstype: ext4
      dev: "/dev/mapper/{{ lvm_group }}-{{ lvm_volume }}"
    tags: [ "lvm" ]
  - name: Create /mnt/storage to mount the volume
    file:
      path: /mnt/storage
      state: directory
    tags: [ "lvm" ]
  - name: Mount volume and put in fstab
    mount:
      name: /mnt/storage
      src: "/dev/mapper/{{ lvm_group }}-{{lvm_volume }}"
      fstype: ext4
      state: mounted
    tags: [ "lvm" ]
